** InfixToPostfix.h

#ifndef __INFIX_TO_POSTFIX_H__
#define __INFIX_TO_POSTFIX_H__

void ConvToRPNExp(char exp[]);

#endif


** InfixToPostfix.c

#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include "ListBaseStack.h"

#pragma warning(disable:4996)

int GetOpPrec(char op)  //우선수위
{
    switch (op)
    {
    case '*':
    case '/':
        return 5; // 가장 높은 우선순위
    case '+':
    case '-':
        return 3; // 5보단 작고, 1보단 큰 우선순위
    case '(':
        return 1; // 가장 낮은 우선순위
    }

    return -1;   // 등록되지 않은 연산자
}
int WhoPrecOp(char op1, char op2) //op1이 우선순위 높으면 1,op2는 -1 ,같으면 0
{
    int op1Prec = GetOpPrec(op1);
    int op2Prec = GetOpPrec(op2);

    if (op1Prec > op2Prec)
    {
        return 1;
    }
    else if (op2Prec > op1Prec)
    {
        return -1;
    }
    else
    {
        return 0;
    }
}
/*
중위 -> 후위로 변환하는 함수
후위 표기법의 다른 이름 : "Reverse Polish Notation"
*/
void ConvToRPNExp(char exp[])
{
   Stack stack;
   int expLen = strlen(exp);
   char* convExp = (char*)malloc(expLen + 1); // 변환된 수식을 담을 공간 할당.

   int i, idx = 0;
   char tok, popOp;

   memset(convExp, 0, sizeof(char) * expLen + 1); // 메모리 초기화 함수. convExp 공간을 '0'으로 sizeof(char)*expLen+1 길이 만큼 초기화 시키는 것. 
   StackInit(&stack);

   for (i = 0; i < expLen; i++)
   {
      tok = exp[i]; // 전달된 중위 표기법 수식(exp)을 한 문자씩 tok에 저장. 

      if (isdigit(tok)) // tok에 저장된 문자가 (10진수)숫자면 true(1) 반환.
      {
         convExp[idx++] = tok; // 숫자면 convExp 배열에 바로 저장. 
      }
      else
      {
         switch (tok)
         {
         case '(':            // 여는 소괄호라면, 
            SPush(&stack, tok); // 스택에 쌓기.
            break;

         case ')':            // 닫는 소괄호라면,
            while (1)         // 반복해서,
            {
               popOp = SPop(&stack);   // 스택에서 연산자 꺼내서
               if (popOp == '(')       // ( 만날때까지
                  break;
               convExp[idx++] = popOp; // 배열 convExp 에 저장. 
            }
            break;

         case '+': case '-':
         case '*': case '/':
            while (!SIsEmpty(&stack) && WhoPrecOp(SPeek(&stack), tok) >= 0) // (1) 스택이 안비어있고 (2) 현재 tok보다, stack에 있는 연산자가 더 우선순위 높다면, 
               convExp[idx++] = SPop(&stack); // POP해서 convExp에 넣기. 

            SPush(&stack, tok); // (POP을 했든, 안했든) 현재 tok을 넣을 stack의 위치를 찾았으니, 넣자.
            break;
         }
      }
   }

   while (!SIsEmpty(&stack))         // 스택에 남아있는 모든 연산자를,
      convExp[idx++] = SPop(&stack);  // 배열 convExp로 이동

   strcpy(exp, convExp); // 변환된 수식을 exp에 복사하고,
   free(convExp);        // convExp는 동적해제.
}
